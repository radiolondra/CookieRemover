@page "/index.html"
@using CookieExtension.Models;
@using System.Globalization;
@inherits BasePage
@inject IJSRuntime js

<BSContainer Container="Container.Fluid">
    <BSRow Align="Align.Start" Padding="Padding.Medium">
        <BSCol>
            <h2 style="text-align:center; color:darkblue;">Hi, so today you want to delete some cookies, eh?</h2>
        </BSCol>
    </BSRow>    
    
    @* Insert CookiesGrid component *@
    <CookiesGrid 
                 cc="@cc"
                 ExternalChange="@OnChange"
                 ExternalFilter="@CustomFilter"
                 ExternalGetCookies="@GetAllBrowserCookiesWE"
                 ExternalRemoveCookies="@RemoveCookies"
    >
    </CookiesGrid>    

</BSContainer>

@code {
    
    private static string filter { get; set; }

    public static CookiesClass cc = new CookiesClass(20, 0);    

    public async Task GetAllBrowserCookiesWE()
    {

        WebExtensions.Net.Cookies.GetAllDetails details = new();

        /*
        details.Url = null;
        details.Domain = null;
        details.FirstPartyDomain = null;
        details.Name = null;
        details.PartitionKey = null;
        details.Path = null;
        details.Secure = null;
        details.Session = null;
        details.StoreId = null;
        */

        var cookiesWE = await WebExtensions.Cookies.GetAll(details);


        foreach (WebExtensions.Net.Cookies.Cookie cookie in cookiesWE)
        {
            await js.InvokeVoidAsync("console.log", cookie);

            string sExpDt = string.Empty;

            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            try
            {
                dateTime = dateTime.AddSeconds((double)cookie.ExpirationDate).ToLocalTime();
                sExpDt = dateTime.ToString("M/d/yyyy H:mm:ss", CultureInfo.InvariantCulture);
            }
            catch
            {
                sExpDt = "Not Provided";
            }
            CookieItem ci = new CookieItem(cookie.Name, cookie.Value, cookie.Domain, cookie.Path, sExpDt);
            cc.data.Add(ci);
        }

        cc.data = cc.data.OrderBy<CookieItem, string>(l => l.CookieName).ToList();

        cc._count = cc.data.Count();
        cc._cookies = cc.data.Skip(cc._startPage * cc.ItemsPerPage).Take(cc.ItemsPerPage);        
    }

    /// <summary>
    /// OnChange event for the BS table
    /// </summary>
    /// <param name="dataRequest"></param>
    private void OnChange(DataRequest dataRequest)
    {
        cc.OnChange(dataRequest);
        StateHasChanged();
    }
    /// <summary>
    /// Filter method for BS table
    /// </summary>
    /// <param name="e"></param>
    private void CustomFilter(string e)
    {
        filter = e;
        cc.CustomFilter(e);
        StateHasChanged();
    }

    private async Task RemoveCookies()
    {
        WebExtensions.Net.Cookies.RemoveDetails details = new();

        foreach (var cookie in cc.data)
        {
            if (cookie.CookieDomain.ToLower().Contains(filter.ToLower()))
            {
                var domain = cookie.CookieDomain.StartsWith(".") ? cookie.CookieDomain.Remove(0, 1) : cookie.CookieDomain;

                details.Name = cookie.CookieName;
                details.Url = "https://" + domain + cookie.CookiePath;

                await js.InvokeVoidAsync("console.log", details);

                try
                {
                    await WebExtensions.Cookies.Remove(details);                   
                }
                catch
                {
                    ;
                }

                
            }
        }

        cc.data.Clear();
        cc._count = 0;
        cc.CustomFilter("");
        await cc._customFilterRef.Refresh();

        StateHasChanged();
    }

}
